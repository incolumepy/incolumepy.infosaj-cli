[tool.poetry]
name = "incolumepy.infosaj_cli"
version = "0.1.0-alpha.1"
description = "Command Line Interface (CLI) para Gerador do Informativo SAJ em HTML."
authors = ["Britodfbr <britodfbr@gmail.com>"]
packages = [
  {include = "incolumepy", from=""},
]

classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Operating System :: OS Independent',
  'Natural Language :: Portuguese (Brazilian)',
  "Programming Language :: Python",
  'Topic :: Software Development :: Libraries :: Python Modules',
  'Topic :: Utilities',
]
include = [
  'README.md',
  "CHANGELOG.md",
  'docs/HISTORY.rst',
  'docs/EXAMPLES.rst',
  'docs/CONTRIBUTORS.rst',
]
exclude = [
  "incolumepy/infosaj/compose.yml",
  "incolumepy/infosaj/Dockerfile",
  "incolumepy/infosaj/insumos/",
  "tests/",
]

[tool.poetry.scripts]
infosaj = 'incolumepy.infosaj.cli:infosaj'

[tool.poetry.urls]
'Source' = 'https://github.com/incolumepy/incolumepy.infosaj'
'Tracker' = 'https://github.com/incolumepy/incolumepy.infosaj/issues'
'Oficial' = 'https://github.com/incolumepy/incolumepy.infosaj'

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.1.3"


[tool.poetry.extras]

[tool.poetry.dev-dependencies]
black = "^22.3.0"
flake8 = "^4.0.1"
furo = "^2022.4.7"
isort = "^5.10.1"
mypy = "^0.942"
mypy-extensions = "^0.4.3"
myst-parser = "^0.17.0"
pydocstyle = "^6.1.1"
pylint = "^2.13.5"
pytest = "^7.1.1"
pytest-cov = "^3.0.0"
pytest-mock = "^3.7.0"
safety = "^1.10.3"
Sphinx = "^4.5.0"
tox = "^3.24.5"
types-toml = "^0.10.4"
"incolumepy.utils" = {git = "https://gitlab.com/development-incolume/incolumepy.utils.git", rev = "master"}
types-PyYAML = "^6.0.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
#log_format = '%(asctime)s %(levelname)s %(message)s'
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%F@%T'
addopts = "--cov=incolumepy"
testpaths = [
  "tests",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]

[tool.coverage.report]
exclude_lines = [
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "__package__ =",
  "def terminal.",
  "__author__",
]


[PEP8]
# Detalhes em https://pep8.org/
# define para todos os linters compat√≠veis
max-line-length = 79

[tool.black]
line-length = 79
#target-version = ['py38']
# include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/pyproject.toml  # exclude a file named pyproject.toml in the root of the project (in addition to the defaults)
\.tox
\.eggs
build
dist
exemplos
relatorios
docs
data
.pytest_cache
'''

[flake8]
max-complexity = 5

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"

[tool.pylint.messages_control]
disable = [
    # Disable too many and too few checks.
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-few-public-methods",

    # Similar lines in files (often the case in tests).
    "duplicate-code",

    # Many functions (e.g. callbacks) will naturally have unused arguments.
    "unused-argument",

    # Disable checking that method could be a function in classes (often used for organisation).
    "no-self-use",

    # Disable failure for TODO items in the codebase (code will always have TODOs).
    "fixme",

    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",

    "no-member",
    "unspecified-encoding",
]

[tool.mypy]
mypy_path = "incolumepy"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.isort]
multi_line_output = 3
#line_length = 120
include_trailing_comma = true

[pycodestyle]
#max_line_length = 120


[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.1.0
isolated_build = True
envlist =
    clean
    black
    isort
    pydocstyle
    flake8
    mypy
    pylint
    py38
    py39
    py310

;[tox:.package]
;basepython = python3

[testenv]
whitelist_externals = poetry
skip_install = true
commands =
    poetry env use {envpython}
    poetry install -vv --no-root
    poetry run pytest {posargs} tests/ -m \"not(slow or webtest)\"

[testenv:clean]
deps = coverage
commands =
  poetry run coverage erase

[testenv:linters]
commands =
  {[testenv:black]commands}
  {[testenv:isort]commands}
  {[testenv:flake8]commands}
  {[testenv:pydocstyle]commands}
  {[testenv:mypy]commands}
  {[testenv:pylint]commands}

[testenv:stats]
commands = poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml

[testenv:flake8]
deps = flake8
commands = poetry run flake8 --config pyproject.toml incolumepy/ tests/

[testenv:mypy]
deps =
    mypy
    types-toml
    types-Deprecated
commands = poetry run mypy incolumepy/

[testenv:pydocstyle]
commands = poetry run pydocstyle incolumepy/ tests/

[testenv:isort]
commands = poetry run isort --check --atomic --py all incolumepy/ tests/

[testenv:pylint]
commands = poetry run pylint incolumepy/ tests/

[testenv:black]
commands = poetry run black --check incolumepy/ tests/

[testenv:safety]
commands = poetry run safety check
"""
